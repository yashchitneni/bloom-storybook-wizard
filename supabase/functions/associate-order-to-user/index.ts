import { serve } from \'https://deno.land/std@0.131.0/http/server.ts\';\nimport { createClient } from \'https://esm.sh/@supabase/supabase-js@2\';\n\nconst corsHeaders = {\n  \'Access-Control-Allow-Origin\': \'*\',\n  \'Access-Control-Allow-Headers\': \'authorization, x-client-info, apikey, content-type\',\n};\n\nserve(async (req: Request) => {\n  if (req.method === \'OPTIONS\') {\n    return new Response(\'ok\', { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get(\'SUPABASE_URL\') ?? \'\',\n      Deno.env.get(\'SUPABASE_ANON_KEY\') ?? \'\',\n      { global: { headers: { Authorization: req.headers.get(\'Authorization\')! } } }\n    );\n\n    const { data: { user } } = await supabaseClient.auth.getUser();\n\n    if (!user) {\n      return new Response(JSON.stringify({ error: \'User not authenticated\' }), {\n        headers: { ...corsHeaders, \'Content-Type\': \'application/json\' },\n        status: 401,\n      });\n    }\n\n    const { order_id_to_claim, story_email } = await req.json(); // story_email is optional for an extra check\n\n    if (!order_id_to_claim) {\n      return new Response(JSON.stringify({ error: \'Order ID to claim is required\' }), {\n        headers: { ...corsHeaders, \'Content-Type\': \'application/json\' },\n        status: 400,\n      });\n    }\n\n    console.log(`[associate-order] User ${user.id} attempting to claim order/session ID: ${order_id_to_claim}`);\n\n    // Use service role client for backend database operations\n    const serviceClient = createClient(\n      Deno.env.get(\'SUPABASE_URL\') ?? \'\',\n      Deno.env.get(\'SUPABASE_SERVICE_ROLE_KEY\') ?? \'\'\n    );\n\n    // Fetch the storybook record by stripe_session_id\n    const { data: storybook, error: fetchError } = await serviceClient\n      .from(\'storybooks\')\n      .select(\'id, email, author_id\')\n      .eq(\'stripe_session_id\', order_id_to_claim)\n      .maybeSingle();\n\n    if (fetchError) {\n      console.error(\'[associate-order] Error fetching storybook:\', fetchError);\n      return new Response(JSON.stringify({ error: \'Failed to fetch story details: \' + fetchError.message }), {\n        headers: { ...corsHeaders, \'Content-Type\': \'application/json\' },\n        status: 500,\n      });\n    }\n\n    if (!storybook) {\n      console.warn(\`[associate-order] No storybook found for stripe_session_id: ${order_id_to_claim}\`);\n      return new Response(JSON.stringify({ error: \'Order not found or already claimed by this session ID.\' }), {\n        headers: { ...corsHeaders, \'Content-Type\': \'application/json\' },\n        status: 404,\n      });\n    }\n\n    // Security check: Ensure the email on the story matches the authenticated user\'s email\n    // This is a strong link to prevent arbitrary claiming if someone guesses a session ID.\n    if (storybook.email !== user.email) {\n      console.warn(\`[associate-order] Email mismatch: Story email (${storybook.email}) vs User email (${user.email}) for session ${order_id_to_claim}\`);\n      return new Response(JSON.stringify({ error: \'Email on order does not match your account email.\' }), {\n        headers: { ...corsHeaders, \'Content-Type\': \'application/json\' },\n        status: 403, // Forbidden\n      });\n    }\n    \n    if (storybook.author_id && storybook.author_id === user.id) {\n        console.log(\`[associate-order] Order ${storybook.id} already associated with user ${user.id}\`);\n        return new Response(JSON.stringify({ message: \'Order already associated with this account.\', storybook_id: storybook.id }), {\n            headers: { ...corsHeaders, \'Content-Type\': \'application/json\' },\n            status: 200, \n        });\n    } else if (storybook.author_id && storybook.author_id !== user.id) {\n        console.warn(\`[associate-order] Order ${storybook.id} is already associated with a DIFFERENT user ${storybook.author_id}. User ${user.id} attempted to claim.\`);\n        return new Response(JSON.stringify({ error: \'This order is already claimed by another account.\' }), {\n            headers: { ...corsHeaders, \'Content-Type\': \'application/json\' },\n            status: 409, // Conflict\n        });\n    }\n\n    // Associate the storybook with the user\n    const { error: updateError } = await serviceClient\n      .from(\'storybooks\')\n      .update({ author_id: user.id, status: \'claimed_by_user\' }) // Optionally update status\n      .eq(\'id\', storybook.id)\n      .is(\'author_id\', null); // Ensure we only update if author_id is still null\n\n    if (updateError) {\n      console.error(\'[associate-order] Error updating storybook:\', updateError);\n      return new Response(JSON.stringify({ error: \'Failed to associate order with your account: \' + updateError.message }), {\n        headers: { ...corsHeaders, \'Content-Type\': \'application/json\' },\n        status: 500,\n      });\n    }\n\n    console.log(\`[associate-order] Successfully associated storybook ${storybook.id} with user ${user.id}\`);\n    return new Response(JSON.stringify({ message: \'Order successfully associated with your account.\', storybook_id: storybook.id }), {\n      headers: { ...corsHeaders, \'Content-Type\': \'application/json\' },\n      status: 200,\n    });\n\n  } catch (error) {\n    console.error(\'[associate-order] Unexpected error:\', error);\n    return new Response(JSON.stringify({ error: \'An unexpected error occurred: \' + error.message }), {\n      headers: { ...corsHeaders, \'Content-Type\': \'application/json\' },\n      status: 500,\n    });\n  }\n}); 